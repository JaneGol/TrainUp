Below is a **step-by-step “Replit Agent Task List.”**
Paste everything in the grey block into the **Ask AI** side-panel of your *SportsMindTracker* Repl and hit **Send**.
It will eliminate the *“400: Valid duration is required”* error and make load re-calculation use the correct **field > gym > match** coefficients.

---

````txt
# ------------------------------------------------------------
# Replit-Agent Task  –  Fix duration-update 400 error + load coeff
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# ------------------------------------------------------------

## 0. Context
PATCH /api/training/:id fails because the route re-uses the *insert* zod schema,
which requires all fields. We only send `durationMinutes`, so validation explodes.

## 1. Create slim update-schema
### 1.1  File: src/schema/updateTrainingEntrySchema.ts
```ts
import { z } from "zod";

export const updateTrainingEntrySchema = z.object({
  id:             z.number(),
  durationMinutes: z.number().int().min(15).max(240),
});
export type UpdateTrainingEntry = z.infer<typeof updateTrainingEntrySchema>;
````

## 2. Patch route uses new schema

### 2.1  File: src/routes/training.update.ts  (or similar)

```ts
import { updateTrainingEntrySchema } from "@/schema/updateTrainingEntrySchema";
// …
router.patch("/training/:id", async (req,res) => {
  const body = updateTrainingEntrySchema.parse({      // ✅ validate only id + duration
    id: +req.params.id,
    durationMinutes: req.body.durationMinutes,
  });

  const sess = await db.training_sessions.update({
    where: { id: body.id },
    data : { duration_minutes: body.durationMinutes },
    select: {
      id: true, rpe:true, emotional_load:true, training_type:true,
    },
  });

  const load = calcSessionLoad(
    sess.rpe, body.durationMinutes, sess.training_type, sess.emotional_load);

  await db.training_sessions.update({
    where:{ id:sess.id },
    data :{ session_load: load },
  });

  res.json({ ok:true, session_load: load });
});
```

## 3. Add coefficient table + calc util

### 3.1  File: src/utils/calcSessionLoad.ts

```ts
export type TrainingType = "Field Training" | "Gym Training" | "Match";

const COEFF: Record<TrainingType, number> = {
  "Gym Training"  : 1.0,
  "Field Training": 1.2,
  "Match"         : 1.5,
};

export const calcSessionLoad = (
  rpe:number, duration:number,
  type:TrainingType, emo:number
) => Math.round(rpe * duration * emo * COEFF[type]);
```

*(Import and use this in the patch route above and wherever initial inserts happen.)*

## 4. Front-end clamp (bottom-sheet stepper)

### 4.1  File: src/components/SessionSheet.tsx

```tsx
const dec = () => setDuration(d => Math.max(15, d-5));
const inc = () => setDuration(d => Math.min(240, d+5));
```

## 5. Better toast on failure

### 5.1  File: same component

```tsx
onError: (e:any)=> toast.error(e.response?.data?.error ?? "Update failed"),
```

## 6. Invalidate caches (already present) – no change.

## 7. Manual QA (agent auto-runs)

1. Edit duration to **10** → stepper clamps to 15; save OK.
2. Edit to **300** → clamps to 240; save OK.
3. Patch returns `{session_load: …}` and UI refreshes charts.
4. Load differs when training\_type = “Field Training” vs “Gym Training”.

## 8. Commit message

> fix(api): use slim update schema; add coeff table; clamp duration

# End of agent task

```

---

**Send** the task to the agent; once it commits, “Save changes” will work and session-load maths will respect the field / gym / match coefficients.
```
