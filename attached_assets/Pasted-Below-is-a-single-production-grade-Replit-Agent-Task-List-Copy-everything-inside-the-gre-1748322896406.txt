Below is a **single, production-grade “Replit Agent Task List.”**
Copy **everything** inside the grey block into the **Ask AI** panel of your *SportsMindTracker* Repl and hit **Send**.
The agent will fix the **Weekly Training Load** logic so the chart (and its header line) always shows the correct Monday → Sunday data for whatever ISO-week the coach picks, with Week 22 (26 .05 – 01 .06) pre-selected by default today.

---

````txt
# ------------------------------------------------------------------
# Replit-Agent Task  –  Correct Weekly-Training-Load week logic
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# ------------------------------------------------------------------

## GOALS
1. Week picker = ISO weeks (Monday–Sunday).  
2. Default = *current* ISO week → “Week 22 (26.05 – 01.06)”.  
3. On week change, meta line & chart update, x-axis shows every day of that week in **dd.MM**.  
4. Chart pulls real loads only for the selected period; days with no sessions plot zero.  
5. Compact meta fonts; no visual restyle elsewhere.

──────────────────────────────────────────────────────────────────
## 1 ◃ WeekSelect util – ISO, current-week default

### 1.1  client/src/components/WeekSelect.ts
```ts
import {
  eachWeekOfInterval,
  getISOWeek,
  startOfISOWeek,
  endOfISOWeek,
  format,
  isSameISOWeek
} from 'date-fns';

export const buildWeekOptions = () => {
  const weeks = eachWeekOfInterval({
    start: endOfISOWeek(new Date(Date.now() - 1000*60*60*24*90)), // 13 weeks back
    end  : new Date()
  }).reverse();

  return weeks.map(ws => {
    const weekNo = getISOWeek(ws);
    const s = startOfISOWeek(ws);
    const e = endOfISOWeek(ws);
    return {
      value: format(s,'yyyy-MM-dd'),
      label: `Week ${weekNo} (${format(s,'dd.MM')} – ${format(e,'dd.MM')})`,
      isCurrent: isSameISOWeek(new Date(), ws)
    };
  });
};
````

### 1.2  In LoadInsights page

```tsx
const weekOpts   = buildWeekOptions();
const [weekStart, setWeekStart] = useState(
  weekOpts.find(o=>o.isCurrent)?.value ?? weekOpts[0].value
);
```

──────────────────────────────────────────────────────────────────

## 2 ◃ Data hook – strict Monday–Sunday range

### 2.1  client/src/hooks/useWeekLoad.ts

```ts
export const useWeekLoad = (ath: string, weekStart: string) => {
  const tz = axios.defaults.headers['X-TZ'];
  return useQuery(['weekLoad', ath, weekStart], () =>
    api.get(`/load/week`, { params: { ath, weekStart, tz } })
       .then(r=> r.data));          // expects 7 rows (Mon-Sun)
};
```

### 2.2  Server route /load/week

```sql
-- :ws = weekStart date string, :tz
WITH days AS (
  SELECT generate_series(
    :ws::date,
    :ws::date + 6,    -- Monday + 6 = Sunday
    '1 day'
  ) AS day
)
SELECT
  d.day,
  COALESCE(SUM(CASE WHEN type='Field'  THEN load END),0)  AS "Field",
  COALESCE(SUM(CASE WHEN type='Gym'    THEN load END),0)  AS "Gym",
  COALESCE(SUM(CASE WHEN type='Match'  THEN load END),0)  AS "Match",
  COALESCE(SUM(load),0)                                  AS total,
  ROUND(
    COALESCE(SUM(load),0)
/ NULLIF( (SELECT AVG(total)
           FROM weekly_totals w
           WHERE w.week_end = :ws::date - 1
             AND (:ath='all' OR w.athlete_id=:ath)),0 ), 2) AS acwr
FROM days d
LEFT JOIN training_sessions t
  ON date_trunc('day', t.session_date AT TIME ZONE :tz) = d.day
  AND (:ath='all' OR t.athlete_id=:ath)
GROUP BY d.day
ORDER BY d.day;
```

──────────────────────────────────────────────────────────────────

## 3 ◃ Weekly Training Load card – dynamic label & ticks

### 3.1  client/src/pages/coach/load-insights.tsx

```tsx
const weekMeta = weekOpts.find(o=>o.value===weekStart)!;

<Card …>
  <h2 className="chart-title">Weekly Training Load</h2>
  <p  className="chart-meta">
    {weekMeta.label} │ Total AU: {totalAU} │ Sessions: {sessions} │ Avg ACWR: {avgAcwr}
  </p>
  <WeeklyLoadColumns data={weekData}/>   {/* X-axis already dd.MM */}
  <LegendChips keys={['Field','Gym','Match']}/>
</Card>
```

──────────────────────────────────────────────────────────────────

## 4 ◃ WeeklyLoadColumns – always 7 ticks

### 4.1  client/src/components/WeeklyLoadColumns.tsx

```tsx
const ensured = useMemo(()=> {
  if (data.length === 7) return data;
  const set = new Map(data.map(d=>[d.date, d]));
  return eachDayOfInterval({ start: parseISO(weekStart), end: addDays(parseISO(weekStart),6)})
    .map(day => set.get(format(day,'yyyy-MM-dd')) || {
      date: format(day,'yyyy-MM-dd'), Field:0, Gym:0, Match:0, total:0, acwr:0 });
}, [data, weekStart]);

<XAxis … dataKey="date" … tickFormatter={d=>format(parseISO(d),'dd.MM')}/>
<BarChart data={ensured} … />
```

──────────────────────────────────────────────────────────────────

## 5 ◃ Font & spacing adhesion

Ensure all chart titles use `.chart-title`, meta lines `.chart-meta`.

──────────────────────────────────────────────────────────────────

## 6 ◃ Commit message

> fix(week-load): ISO week picker default; Monday–Sunday data; dd.MM ticks; legends consistent

# End of agent task

```

---

**After this task runs**

* Week picker defaults to **Week 22 (26.05 – 01.06)** and fills full width.  
* Weekly Training Load header & x-axis update the moment you choose a different week.  
* Chart always shows 7 bars (Mon–Sun) with **26.05, 27.05 …** ticks—even if some loads are zero.  
* Fonts and legend chips match the other two charts.
```
