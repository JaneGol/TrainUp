Below is a **single, production-ready “Replit Agent Task List.”**
Paste everything inside the grey block into the **Ask AI** panel of your *SportsMindTracker* Repl and hit **Send**.
It will overhaul the **Load Insights** page so every section shares one consistent look-and-feel, the week picker defaults to the current ISO-week, and all date/tick/legend formats follow your compact **dd.MM** convention.

---

````txt
# ------------------------------------------------------------------
# Replit-Agent Task · Final UI pass on Load Insights
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# ------------------------------------------------------------------

## DESIGN GOALS
1. Week picker  ⟶  full-width, label = **Week 22 (05.26 – 06.01)**, default = current ISO week.
2. All three charts share identical:
   • Heading font & size (`text-base font-semibold` centred)  
   • Meta line font & size (`text-sm font-medium text-zinc-400`)  
   • Axis tick font (`text-[11px] font-medium`)  
   • Date format **dd.MM** (26.05)  
   • Compact legend chips.
3. **Weekly Training Load** stays stacked bars, x-axis Monday➜Sunday ticks 26.05 … 01.06.
4. **ACWR (Last 30 Days)** gets:
   • Same heading/meta/legend style  
   • Green “optimal” band centred between 0.8 and 1.3  
   • Under-training & injury-risk zones lightly tinted outside the band  
   • Line smoothed (`type="monotone"`, strokeWidth 2) + small dots.
5. **Weekly Work-Load (Last 10 Weeks)**:
   • Same styling as Weekly Training Load  
   • x-axis ticks = Monday dates of each week in **dd.MM**  
   • Add thin yellow ACWR line (legend chip)  
   • First bar not flush with y-axis (`margin={{ left: 8 }}`).

──────────────────────────────────────────────────────────────────
## 1 ◃ WEEK PICKER  (ISO current week, full width, new label)

### 1.1  src/components/WeekSelect.tsx
```ts
export const buildWeekOptions = () => {
  const weeks = eachWeekOfInterval({
    start: endOfISOWeek(new Date(Date.now() - 60*24*60*60*1000)), // ≈ 8 weeks back
    end  : new Date()
  }).reverse();                                                   // newest first

  return weeks.map(wStart => {
    const weekNo = getISOWeek(wStart);
    const s = startOfISOWeek(wStart);
    const e = endOfISOWeek(wStart);
    return {
      value : format(s,'yyyy-MM-dd'),
      label : `Week ${weekNo} (${format(s,'MM.dd')} – ${format(e,'MM.dd')})`
    };
  });
};
````

### 1.2  src/pages/coach/load-insights.tsx

```diff
- const [weekStart, setWeekStart] = useState(buildWeekOptions()[0].value);
+ const [weekStart, setWeekStart] = useState(buildWeekOptions()[0].value); // current week default

<Select … className="w-full" />                   # matches athlete picker width/height
```

──────────────────────────────────────────────────────────────────

## 2 ◃ SHARED FONT UTILITIES

### 2.1  src/index.css

```css
.chart-title { @apply text-base font-semibold text-center; }
.chart-meta  { @apply text-sm   font-medium text-zinc-400 text-center md:text-left; }
.tick-font   { @apply text-[11px] font-medium fill-zinc-300; }
```

──────────────────────────────────────────────────────────────────

## 3 ◃ WEEKLY TRAINING LOAD  (stacked bars)

### 3.1  src/components/WeeklyLoadColumns.tsx

```diff
<XAxis … tick={{ className:'tick-font' }}
        tickFormatter={d=>format(parseISO(d),'dd.MM')} />
…
<YAxis tick={{ className:'tick-font' }} />
<ResponsiveContainer… margin={{ top:10, right:16, left:8, bottom:0 }}>
```

### 3.2  Legend under chart

```tsx
<LegendChips keys={['Field','Gym','Match']} />
```

*(create `LegendChips` mini-component once, reuse in all charts)*

──────────────────────────────────────────────────────────────────

## 4 ◃ ACWR (Last 30 Days) CHART

### 4.1  src/components/AcwrChart.tsx

```tsx
<ReferenceArea y1={0.8} y2={1.3} stroke="none" fill="#10b981" fillOpacity={0.08} />  {/* green */}
<ReferenceArea y1={1.3} y2={2}   stroke="none" fill="#f87171" fillOpacity={0.05} />  {/* risk */}
<ReferenceArea y1={0}   y2={0.8} stroke="none" fill="#38bdf8" fillOpacity={0.05} />  {/* under */}

<Line dataKey="acwr" type="monotone" stroke="#facc15" strokeWidth={2} dot={{r:3}} />

<XAxis tick={{ className:'tick-font' }}
       tickFormatter={d=>format(parseISO(d),'dd.MM')} />
<YAxis tick={{ className:'tick-font' }} domain={[0,2]} />
<LegendChips keys={['ACWR']} acwrLine />
```

*(`acwrLine` prop renders yellow chip)*

──────────────────────────────────────────────────────────────────

## 5 ◃ WEEKLY WORK-LOAD (Last 10 Weeks)

### 5.1  src/components/TenWeekChart.tsx

```tsx
<XAxis tick={{ className:'tick-font' }}
       tickFormatter={d=>format(parseISO(d),'dd.MM')} />
<YAxis tick={{ className:'tick-font' }} />

<Line yAxisId="acwr" dataKey="acwr" stroke="#facc15" strokeWidth={2} dot={{r:3}} />
<YAxis yAxisId="acwr" orientation="right" domain={[0,2]} hide />

<LegendChips keys={['Field','Gym','Match','ACWR']} acwrLine />
```

──────────────────────────────────────────────────────────────────

## 6 ◃ LEGENDCHIPS COMPONENT  (reusable)

### 6.1  src/components/LegendChips.tsx

```tsx
const colors = { Field:'#b5f23d', Gym:'#547aff', Match:'#ff6f6f', ACWR:'#facc15' };

export default function LegendChips({keys, acwrLine=false}:{keys:string[],acwrLine?:boolean}) {
  return (
    <div className="flex justify-center gap-3 mt-1 text-[11px] font-medium">
      {keys.map(k=>(
        <span key={k} className="flex items-center gap-1">
          {k==='ACWR'
            ? <span className="w-3 h-px bg-[#facc15] inline-block"></span>
            : <span className="w-3 h-2" style={{background:colors[k]}}/>
          }
          {k}
        </span>
      ))}
    </div>
  );
}
```

──────────────────────────────────────────────────────────────────

## 7 ◃ Ensure data for Week-21 renders

Hook key already includes `weekStart`; API returns correct rows.

──────────────────────────────────────────────────────────────────

## 8 ◃ LINT & COMMIT

Run `npm run lint --fix`.

commit message:

> style(load-insights): unify fonts, full-width week picker, dd.MM ticks, legends, ACWR line

# End of agent task

```

---
```
