Below is a **clear path forward** and a **ready-to-paste Replit-Agent task list** that makes **every view pull AU straight from the database’s new `session_load` field**. That keeps one—and only one—calculation method.

---

## Recommendation

**Use the database as the single source of truth.**
Now that the trigger stores a fully-agreed AU for every session (`session_load`), the Weekly Training Load chart (and any other aggregate) should simply **SUM `session_load` per day/week** instead of re-computing from raw RPE/Emotional-Load. This guarantees Training Log, drawer, weekly chart, 10-week chart and ACWR all display the exact same numbers.

---

## Replit-Agent Task List  🚀

*Copy everything below into **Ask AI** and press **Send**.*

````txt
# ------------------------------------------------------------------
# Replit-Agent Task – Make ALL charts consume the DB `session_load`
# Repo: SportsMindTracker
# ------------------------------------------------------------------

## 0 ▸ Files to touch
* api/routes/load.week.ts        (or Supabase RPC)
* api/routes/load.tenweeks.ts
* api/routes/acwr.ts
* client/src/hooks/useWeekLoad.ts
* client/src/hooks/useTenWeekLoad.ts
* client/src/hooks/useAcwr30d.ts
* No visual/css changes necessary.

──────────────────────────────────────────────────────────────────
## 1 ▸ API – weekly endpoint returns SUM(session_load)

### 1.1  /load/week
```sql
WITH days AS (
  SELECT generate_series($1::date, $1::date + 6, '1 day') AS day
)
SELECT
  d.day,
  COALESCE(SUM(CASE WHEN t.type='Field'  THEN t.session_load END),0) AS "Field",
  COALESCE(SUM(CASE WHEN t.type='Gym'    THEN t.session_load END),0) AS "Gym",
  COALESCE(SUM(CASE WHEN t.type='Match'  THEN t.session_load END),0) AS "Match",
  COALESCE(SUM(t.session_load),0)                                 AS total
FROM days d
LEFT JOIN training_sessions t
   ON date(t.session_date AT TIME ZONE :tz) = d.day
  AND (:ath='all' OR t.athlete_id=:ath)
GROUP BY d.day
ORDER BY d.day;
````

### 1.2  /load/tenweeks  (weekly totals)

```sql
SELECT
  date_trunc('week', session_date AT TIME ZONE :tz) AS week_start,
  SUM(session_load)                                 AS total,
  SUM(CASE WHEN type='Field'  THEN session_load END) AS "Field",
  SUM(CASE WHEN type='Gym'    THEN session_load END) AS "Gym",
  SUM(CASE WHEN type='Match'  THEN session_load END) AS "Match"
FROM training_sessions
WHERE (:ath='all' OR athlete_id=:ath)
GROUP BY week_start
ORDER BY week_start DESC
LIMIT 10;
```

### 1.3  /acwr/30days

Use SUM(session\_load) for acute & chronic windows (7 d / 28 d).

──────────────────────────────────────────────────────────────────

## 2 ▸ Front-end hooks – remove client math

### 2.1  useWeekLoad

```diff
- map(row => ({ ...row, total: row.Field + row.Gym + row.Match }))
```

(Backend already provides `total`.)

### 2.2  useTenWeekLoad and useAcwr30d

Ensure they return backend values untouched.

──────────────────────────────────────────────────────────────────

## 3 ▸ Remove legacy client calculators

Delete or comment any util that re-multiplies RPE × duration × coeff.

──────────────────────────────────────────────────────────────────

## 4 ▸ QA checklist (agent will run)

✓ Training Log row shows 321 AU → chart bar now also 321 AU
✓ 26 May bar = 321 AU, 27 May bar = 1 185 AU (matches log)
✓ Header “Total AU” == Σ bar heights
✓ ACWR numerator uses same 7-day AU sum
✓ Drawer shows DB value after duration edit; charts refresh

──────────────────────────────────────────────────────────────────

## 5 ▸ Commit message

> chore(load): all aggregates use stored session\_load; remove duplicate client math

# End of task

```

---

**After the agent commits** every AU you see—row, drawer, weekly chart, 10-week chart, ACWR—will come from the exact same stored value, so they can never diverge again.
```
