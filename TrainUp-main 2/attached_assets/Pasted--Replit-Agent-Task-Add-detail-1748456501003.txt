# -----------------------------------------------------------------
# Replit-Agent Task · Add detailed data-flow documentation
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# -----------------------------------------------------------------

## 1 ▸ Create documentation file
Create `docs/DataFlow.md` with front-matter:
```md
# FormTrack Data Flow & Transformation
_An exhaustive guide to where data comes from, how it’s grouped, and which graphs consume it._
2 ▸ Section: Data Sources
Describe each core table:

diary_entries: daily self-control diaries

training_sessions: session metadata + avg_rpe, avg_emo_coeff, session_load

rpe_submissions: per-athlete RPE/emotional-load rows

weekly_totals (view): pre-aggregated week sums + ACWR

3 ▸ Section: API Endpoints
List each endpoint, its params, and output shape:

GET /coach/:team/metrics?date=YYYY-MM-DD → Recovery/Readiness/Alerts

GET /load/week?team&weekStart&ath=… → 7 rows (Mon–Sun) with Field/Gym/Match/total

GET /acwr/30d?ath=… → date-series of ACWR (last 30d)

GET /load/tenweeks?ath=… → ISO-week totals + acwr

GET /training/log?team&start&end&ath=… → per-session rows

PATCH /training/:id → updates duration_minutes, returns new session_load

4 ▸ Section: Grouping & Aggregation Logic
Detail:

Daily: DATE_TRUNC('day', session_date AT TIME ZONE X-TZ)

Weekly: GENERATE_SERIES(weekStart, weekStart+6, '1 day') + LEFT JOIN → fill zeros

ACWR: acute = SUM last 7 d; chronic = avg of past 4 × 7d blocks

Team vs Athlete: param ath=all vs specific ID

5 ▸ Section: Front-end Hooks
Map each hook to its endpoint and cache key:

useKeyMetrics(teamId, date) → /metrics → key ['keyMetrics',teamId,date]

useWeekLoad(ath, weekStart) → /load/week → ['weekLoad',ath,weekStart]

useAcwr30d(ath) → /acwr/30d → ['acwr30d',ath]

useTenWeekLoad(ath) → /load/tenweeks → ['tenWeek',ath]

useSessions(teamId, start, end, ath) → /training/log → ['trainingWeek',…]

6 ▸ Section: Chart Components
For each graph, show:

Component name (WeeklyLoadColumns, AcwrChart, TenWeekChart, etc.)

Props it expects (data, height, etc.)

Recharts mappings (BarChart, ReferenceArea, Line, Pie)

Tick formatting (dd.MM, font classes)

7 ▸ Section: UI Integration Flow
Sequence diagram or bullet list:

Athlete submits RPE → triggers recalc → updates session_load.

PATCH invalidates queries → React-Query refetches.

Charts & lists re-render within 300 ms.

8 ▸ Section: Security & Personalisation
Briefly note RLS policies and JWT claims controlling athlete vs coach data.

9 ▸ Commit
docs: add DataFlow.md (full data-flow & transformation guide)

End of agent task
yaml
Copy
Edit

---

Once it runs, you’ll have **`docs/DataFlow.md`** in your repo with a full, structured breakdown of where data comes from, how it’s processed, and exactly which components render it.







