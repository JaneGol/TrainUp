Replit Change Request: Coach Interface Fixes and Enhancements
This change request addresses several issues in the Coach interface of the sports monitoring app. The goal is to fix logic bugs, improve UI clarity, and add new metrics for better training load monitoring, all while maintaining the existing design style and ensuring data consistency. Each item below outlines the required changes:
1. Fix Key Metrics (Recovery & Readiness) Daily Reset and Pending State
Reset after midnight: Ensure the Recovery and Readiness key metrics on the Coach’s home screen reset to zero at the start of each new day (midnight). Currently, these metrics may carry over values from the previous day; they should instead clear out so that each day starts fresh with 0 values until new data arrives. Implement a daily reset trigger (e.g. check timestamp on app load or use a scheduled job) to set these metrics to 0 at midnight.
Pending data message: If no athlete diary data (wellness entry) has been submitted for the current day, display a placeholder message: “Athlete diary data is pending.” In place of a numeric score, this text should inform the coach that today’s Recovery/Readiness metrics are not yet available. As soon as an athlete submits their daily wellness diary, the actual Recovery and Readiness values should compute and replace the pending message. This prevents confusion and makes it clear that the absence of data is due to a pending diary entry, not an app error. Implementation notes: Adjust the logic that fetches/calculates daily Recovery and Readiness. After midnight, the app should treat these metrics as undefined or zero until new data comes in. You might implement this by comparing the current date to the last diary submission date – if they differ, reset the values. Also update the UI component (perhaps in readiness-chart.tsx or similar) to show the "pending" message when appropriate. Ensure this message uses the existing text style (e.g. italicized or greyed-out text) to distinguish it from regular metric values, without breaking the layout.
2. Update Alerts Button Behavior for “All Clear” State
Modify the Alerts button logic on the Coach home screen to handle the case when there are no alerts. If all athletes have completed their daily diaries and none are flagged as sick or injured, the interface should explicitly show that everything is okay. For example, when the coach clicks or hovers on the Alerts icon (or opens the alerts dropdown), display a message: “No health alerts. Everyone is healthy.” This reassures the coach that there are currently no issues requiring attention.
In this “all clear” state, any alert indicator on the button itself should be neutral. That is, remove any badge count or warning highlight on the Alerts icon when there are 0 pending items. The Alerts button could be grayed out or simply not highlighted since there’s nothing urgent. The key is that the coach gets positive confirmation that all diaries are submitted and no health problems are reported. Implementation notes: In the Alerts component or route (possibly defined in routes.ts), add a check after fetching the latest statuses: if pendingDiariesCount == 0 and noInjuryFlags == true, then instead of an empty list or a hidden dropdown, show a panel or tooltip with the “Everyone is healthy” message. This might involve adding a conditional render for the alert dropdown content. Make sure this message is styled consistently with other informational messages in the app (perhaps the same style as empty-state messages in other sections). Test by marking all athletes healthy and diaries complete, then verifying the message appears. Conversely, if any diary is missing or someone is marked injured/sick, the Alerts button should function normally (e.g. showing the count of alerts or listing those athletes).
3. Remove Google Sheets Data Export from Athlete Status Overview
In the Athlete Status Overview section of the coach interface, eliminate the Google Sheets export functionality. This means removing the “Export to Google Sheets” button or menu item that allows coaches to export data. The app should no longer reference Google Sheets for data export.
UI Changes: Take out the export button icon from the overview screen’s header or wherever it resides. Ensure that any tooltip or label (“Export to Sheets”) is also removed. After removal, realign any remaining buttons or elements so that the layout doesn’t have an awkward gap – the interface should look clean, as if the export button was never there.
Code Changes: Remove or comment out the code that was handling the Google Sheets export. For example, if there is an onClick handler that packages data and sends it to a Google API, or any OAuth keys related to Google Sheets, those can be safely deleted. Check routes.ts or relevant files for any routes or functions named like “exportToGoogleSheets” or similar and remove them. This prevents dead code and potential errors.
Verify: Build and run the app after removal to ensure the Athlete Status Overview still works properly. The rest of the overview (charts, tables) should be unaffected except that the export option is gone. The removal should not impact any data storage since it was an external export feature.
4. Adjust Athlete Status Section Visuals
In the Athlete Status section (likely the Coach’s view of team wellness and status), make the following UI adjustments for clarity:
Wellness Trends chart padding: In the “7-Day Team Wellness Trends” chart, ensure the first data point is not overlaid on the Y-axis. Currently, the leftmost point or bar might be rendered right at the chart’s origin, making it hard to see. Add some padding or margin on the chart’s left side. For example, if using a chart library, enable an option to offset the first point from the y-axis or add an empty x-axis category at the beginning for spacing. The goal is that the first day’s data point is fully visible with a gap between it and the Y-axis line. After this change, the trend line or bars for all 7 days should be clearly distinguishable, and the Y-axis labels should not overlap any data point.
“Health” column text size: In the “Team Members Status” table (which lists each team member’s status), reduce the font size for the Health column’s text. This column likely shows statuses like “Healthy”, “Injured”, “Sick”, etc., and currently the text might be truncating or wrapping because it’s too large. Apply a slightly smaller font or allow the text to scale down so that each status fits neatly in its cell. This might involve adding a CSS class for that column or a specific <Text> style if using a component library. The text should remain legible, just a bit smaller than other columns. By doing this, even longer words like “Recovering” or multi-word statuses will fit without overflowing. Verify on different screen sizes that the entire table remains readable. (We are not changing the overall design or font family – just using a smaller font size from the existing design system for that column.)
Consistency: Ensure that these visual tweaks align with the app’s design guidelines. For instance, if the app has defined font sizes like small/medium/large, use the appropriate small style for the Health column rather than an arbitrary size. Similarly, for chart padding, use the chart library’s built-in spacing options so it stays consistent with other charts (maintaining gridline alignment, etc.). These changes are purely presentational and should not affect any data logic.
5. Fix Training Log to Dynamically Update
Real-time updates: Update the Training Log feature so that it dynamically reflects new training entries and RPE submissions without requiring a full page reload. Currently, if a coach or athlete adds a training session or an athlete submits their RPE after a workout, the coach’s Training Log might not show this new data immediately. We need to implement a mechanism (either real-time via websockets or a frontend state update) to push new entries into the log view as they come in.
Implementation approach: After a new training session or RPE is submitted, trigger an update in the coach’s Training Log component. For example, if using React with state management, you could dispatch an action to fetch the latest log data for that athlete or append the new entry to the existing list. If the app uses an API, ensure the response from the submission includes the updated log entry which can be added to the UI. Another approach is to use a subscription/websocket on the coach side listening for events (like “new_session_logged”) – when received, refresh the log data. The key is to eliminate the stale data issue.
Verify consistency: After implementing, test by adding a new training entry (with RPE) as an athlete and confirm that, when the coach views the Training Log, the entry appears in the list immediately (or after a very short delay). The Training Log totals (if any, such as weekly load sum) should also update. This fix ties into the Load Insights: the weekly training load and ACWR calculations should now include the new session’s data instantly as well. By making the Training Log reactive, we ensure the data stays consistent across the app – the log, the load charts, and the readiness metrics will all be based on the same up-to-date inputs.
Data consistency: Finally, ensure that the source of truth for training data is unified. For example, if RPE-based load is used in the Weekly Load chart, it should be calculated from the same entries shown in the Training Log. Any new RPE submission should simultaneously impact the Training Log list and the load calculations. This prevents scenarios where the coach sees a new entry in the log but the load chart doesn’t reflect it (or vice versa). After the fix, all components (log, charts, metrics) should pull from the updated data so they remain in sync.
6. Fix and Enhance the Load Insights Section
The Load Insights section provides the coach with charts and analytics about training load. We need to repair broken functionality and improve the charts per requirements:
Restore Weekly Training Load chart: First, debug the Weekly Training Load chart which is currently not displaying data. Check the data flow or API – the chart should be receiving the weekly training load values (likely the sum of session loads per week). Fix any issues in how data is fetched or passed to this chart. This could involve correcting an API endpoint, fixing a state variable, or ensuring the component’s useEffect (if React) pulls the latest data. After the fix, the Weekly Training Load chart should populate with actual values for each week. Test it with existing training data to confirm that bars/points show up. (For example, if the last 4 weeks had total loads of 500, 600, 450, 700, those should reflect on the chart.)
Unify ACWR and Weekly Workload charts: Replace the two separate charts (“ACWR - Acute:Chronic Workload Ratio (Last 30 Days)” and “Weekly Workload (Last 10 Weeks)”) with one unified chart that is weekly-based. This combined chart will cover the last 10 weeks and plot both the weekly load and the ACWR for each week:
The X-axis should represent each of the last 10 weeks (e.g., labeled by week start date or week number).
Plot Weekly Training Load as a bar chart (each bar representing the total training load for that week).
Plot ACWR (Acute:Chronic Workload Ratio) as a line chart or overlaying points for each week. Each week’s ACWR is the ratio of that week’s load (acute load) to the 4-week rolling average load up to that week (chronic load)
archive.trainingground.guru
.
Use a dual Y-axis if necessary: one axis (left) for the load values (which could be large numbers in whatever units the app uses), and another axis (right) for the ACWR (which will typically range around 0 to 2). Make sure the ACWR line and load bars are visually distinct (different colors or line vs bar) and labeled in a legend. For example, bars in blue for “Weekly Load” and a line in orange for “ACWR”.
Remove the old separate charts from the UI, as their data will now be represented in this one combined view. All the information should fit in one chart widget, properly labeled.
Show load & ACWR values per week: Enhance the combined chart with clear indications of the values:
Ensure each week’s data point includes the exact load (e.g., via a tooltip or small label on top of each bar) and the ACWR (maybe shown when hovering over the line or as a label at each point). This allows coaches to read the specific numbers for weekly load and ACWR easily.
Confirm that the ACWR calculation is correct: it should use the previous 3-4 weeks of load to calculate the chronic load. (Typically chronic load is a 4-week average; so for each week starting from week 4, ACWR = that week’s load / avg(load of previous 4 weeks)
archive.trainingground.guru
. For the first few weeks of the 10-week span, if fewer prior weeks are available, handle those cases gracefully – e.g., you might not plot ACWR for those or assume chronic load equals acute load if not enough history.)
The chart should cover 10 weeks which provides a good window of training load trends and the corresponding ACWR changes week by week. This unified view will let coaches correlate spikes in load with spikes in ACWR.
Overlay ACWR risk zones: Add visual cues to the combined chart to indicate safe vs risky ACWR ranges:
Draw a horizontal green band across the chart area corresponding to ACWR values between 0.8 and 1.3 – this range is widely considered the “sweet spot” where injury risk is minimized
firstbeat.com
. Athletes in this zone are increasing load at an optimal rate.
ACWR values below 0.8 can be considered an undertraining zone (the athlete’s load is very low compared to their chronic load), potentially indicating detraining or too little stimulus
runnersworld.com
. ACWR values above 1.3 indicate an elevated injury risk due to a spike in load
runnersworld.com
. While we don’t necessarily need to shade these zones red, we should mark the threshold lines at 0.8 and 1.3 clearly (perhaps with dashed lines or labels "0.8" and "1.3"). This context lets the coach immediately see if a given week’s ACWR is in the danger zone.
The optimal green band (0.8–1.3) should be subtly shaded in the background of the chart. For example, use a semi-transparent green rectangle spanning the X-axis for all weeks and Y-axis from 0.8 to 1.3. Ensure the ACWR line is drawn on top of this so it’s visible.
Optionally, you can further emphasize out-of-range values: e.g., color the ACWR line segments or points red when ACWR > 1.3, and maybe orange or blue when ACWR < 0.8. This isn’t strictly required, but it’s an idea to visually flag weeks of concern.
By overlaying these zones, the chart will give an instant visual indication of how training load increases are trending relative to recommendations. The coach can identify if they have been pushing too hard (>1.3) or perhaps not enough (<0.8) in any given week, and the green band shows the target window.
Testing and data flow: After implementing, test the Load Insights with actual data:
Input a scenario where an athlete has steady loads yielding ACWR ~1.0 and ensure the line sits in the middle of the green band.
Then simulate a spike (e.g., one week 50% higher load than previous); the ACWR for that week should jump above 1.3 and appear above the green band. Verify the tooltip/label shows the correct ratio (e.g., 1.5) and that the banding is correct.
Make sure the weekly load bars align correctly under the correct week labels, and the ACWR points align with the same weeks.
Check edge cases: if no data for a given week, the chart should perhaps skip that week or show zero load and thus ACWR maybe not plotted.
Ensure performance is fine plotting 10 data points with dual-axis.
All these adjustments will make the Load Insights section far more informative and accurate. Coaches will see a comprehensive 10-week workload trend with contextual ACWR info in one glance, rather than flipping between charts.
7. Add New Coach-Facing Training Load Metrics
To enhance training load monitoring, introduce additional metrics on the coach interface. These metrics will provide deeper insights into training patterns and load management. They should be presented in a coach-facing dashboard or the Load Insights page in a clear, concise manner (e.g. as new columns in an overview table or as small info panels). The new metrics to implement include:
Weekly Session Count by Type: Show a breakdown of the number of sessions completed in the last week, categorized by session type. For example: Gym: 5, Field: 3, Match: 1 for the current week. This can be displayed as a summary text or a small chart. One idea is a stacked bar chart where each segment’s size represents the count of that session type for the week (or simply three side-by-side small bars for each type). This metric helps coaches understand training distribution – e.g., are athletes doing too many gym sessions vs field sessions this week? It mirrors the concept of tracking training volume by type (similar to how one might look at weekly training duration by session type
support.sportsintel.ausport.gov.au
). Ensure the categories (Gym, Field, Match) are color-coded or labeled clearly. If the app already uses colors for session types, use those for consistency. Update the data weekly (reset counts every Monday, for instance) so the coach always sees the latest 7-day tally.
Weekly Load Spikes (Percent Change): Calculate the percentage change in total training load from one week to the next, and highlight any significant load spikes or drops. For each new week’s data, compute: (this_week_load - last_week_load) / last_week_load * 100%. Display this as a percentage (rounded appropriately). If the percentage is positive, it means load increased; if negative, load decreased. The coach should be alerted to large increases – for example, if an athlete’s load jumps by >15% week-over-week, that’s a notable spike. Research suggests that increasing training load by more than 10-15% in a short span can raise injury risk
firstbeat.com
. Therefore, implement a visual cue for spikes: e.g., if >15%, show the percentage in a warning color (orange/red) or add an up-arrow icon indicating a spike. Likewise, a big drop might be shown in another color or down-arrow (as it might indicate light week or recovery week). This metric allows coaches to quickly identify abrupt changes. For instance: “Week 5 Load: 1200 → Week 6 Load: 1500, +25% spike” would be flagged. Consider incorporating this in the unified load chart (perhaps an annotation) or as an extra column in a weekly summary table (e.g., “Weekly Change: +25%”). Also handle the first week of data (no previous week) by perhaps leaving it blank or “N/A”.
Chronic Load (4-week Rolling Average): Display the chronic load for context alongside the acute (weekly) load. Chronic load is typically defined as the average weekly load over the past 4 weeks
archive.trainingground.guru
. This gives a sense of the athlete’s fitness base or training background leading up to the current week. Implement a calculation that for each week (starting from week 4 once enough data is available) computes the mean of that week and the 3 preceding weeks’ loads. You can show chronic load as a number (e.g., “Chronic Load: 1100”) or even plot it as a separate line on the 10-week chart (though that could clutter it; it might be better as a textual metric in a table or tooltip). For example, if the last 4 weeks loads were 1000, 1200, 1100, 1300, then this week’s chronic load is 1150. Having chronic load visible helps coaches see whether the acute load is in line with what the athlete has been doing. It also ties directly into the ACWR calculation (acute load / chronic load). Make sure to update the chronic load each week and for each athlete independently.
Spike Index (Acute/Chronic Ratio): Provide the Acute:Chronic Workload Ratio (ACWR) as a standalone metric for quick reference – essentially a “Spike Index” for each athlete’s current workload. This is the same value depicted by the ACWR line on the chart, but listing it numerically (e.g., in a table column “ACWR”) lets the coach compare athletes or quickly check the exact ratio without hovering on the chart. For example, show something like “ACWR: 1.25” for an athlete, meaning last week’s load was 125% of their 4-week average. You might label it as “ACWR” or “Spike Index” in the UI for clarity. If this ratio is outside the optimal 0.8–1.3 range, consider highlighting it (e.g., red text for >1.3). This helps the coach identify at a glance who might be overreaching. Since we already calculate this for the chart, reuse that value here. According to sports science, keeping ACWR around 1.0 (within 0.8–1.3) is ideal, whereas going much above 1.3 indicates a spike in load
runnersworld.com
. Values below 0.8 might indicate the athlete is undertrained for that week (coming off a light load period). By listing the ACWR, we give coaches a single-number summary of load balance.
Days Since Last Training Session: Introduce a metric that tracks how many days it has been since each athlete’s most recent training session. This is useful for coaches to identify athletes who might not have trained recently (perhaps due to rest, injury, or compliance issues). Implement this by looking at the date of the athlete’s last logged session (or last RPE submission) and comparing it to today’s date. Display it as, for example, “Last Session: 3 days ago” or simply “Days Since Last Session: 3”. In the Team Members Status table, this could be an additional column (e.g., “Days Idle” or similar), or it could appear when selecting an athlete. We are not modifying the athlete’s own view, but for the coach, this info is valuable. If an athlete has 0 days since last session (i.e., they trained today), you might show 0 or “Today”. If they haven’t trained in, say, 7+ days, that number might be highlighted (the coach might need to check on them). This metric helps ensure no one slips through the cracks – if someone hasn’t logged training in a long time, the coach will see it.
Design & Integration: Add these metrics in a way that complements the existing interface. For instance, the session count and load spike % might be shown in a weekly summary panel or added to the existing “Team Members Status” table as new columns (if space permits after adjusting font sizes). The chronic load and ACWR could be part of the Load Insights display – e.g., when the coach clicks on an athlete’s load graph, show their current acute vs chronic load numbers. Days since last session could be a column in the status table or a tooltip over an athlete’s name indicating how long since they trained. Use existing color schemes for flags (maybe the app uses green/red indicators for good/bad statuses). For example, a high spike % or ACWR could be red. Use tooltips or info icons to define these metrics if needed (some coaches might not know what “ACWR” or “chronic load” means, so a brief description on hover could be helpful). Implementing these additional metrics will greatly enhance the coach’s ability to monitor training load. Coaches will have both high-level indicators (like ACWR and chronic load) and granular info (session counts by type, days since training) at their fingertips. This leads to better decision-making around training adjustments, risk management, and athlete readiness.
8. No Changes to Athlete-Facing Sections
All the above modifications should be confined to the Coach interface. Do not modify the Athletes section of the app (the athlete’s own interface for logging data or viewing their info). The athlete-facing features (daily diary submission, training logging UI, etc.) remain unchanged in behavior and design. We are only improving how the data is presented and utilized on the coach’s side. Make sure that any new data or calculations (e.g., ACWR, chronic load) are derived from existing athlete data without requiring additional input from athletes. The athletes will continue using the app as before to enter diaries and training info. The Coach interface will simply interpret and display that data in new ways. By isolating changes to the coach module, we ensure we’re not introducing any regressions or confusion in the athlete user experience.
Summary: Implementing these changes will fix current bugs (daily metrics reset, alerts logic, data not updating) and introduce valuable new insights (training distribution, load spikes, ACWR context) for coaches. All new features will adhere to the existing design system (colors, fonts, component styles) to maintain a seamless look and feel. Finally, rigorous testing should be done after these changes – ensure that Recovery/Readiness metrics reset correctly each day, the alerts message appears at appropriate times, the training log and load charts remain in sync with actual submissions, and the new metrics accurately reflect the underlying data. With these fixes and enhancements in place, the Coach interface will become more reliable and informative, helping coaches optimize training plans and athlete wellness with confidence. Sources: