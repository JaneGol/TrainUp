The root cause is in your filtering logic: you’re filtering out **everything** because:

1. **`timeRange` was never declared**, so `parseInt(timeRange)` is `NaN`, making

   ```js
   new Date(item.date) >= new Date(Date.now() - NaN * …)
   ```

   always false.

2. You’re checking against a non-existent variable **`selectedAthlete`** instead of your actual state `athleteId`, so

   ```js
   selectedAthlete === "all"
   ```

   is always false and again drops every record.

---

### Fix for `load-insights.tsx`

Paste the diff below into your **Ask AI** panel to have the agent correct these two bugs:

```diff
--- a/client/src/pages/coach/load-insights.tsx
+++ b/client/src/pages/coach/load-insights.tsx
@@ export default function LoadInsights() {
- const [athleteId, setAthleteId] = useState<string>("all");
+ const [athleteId, setAthleteId] = useState<string>("all");
+ // NEW: track the selected time‐range in days (default: last 7 days)
+ const [timeRange, setTimeRange]     = useState<string>("7");

@@
- const filteredTrainingLoad = Array.isArray(trainingLoad) ? trainingLoad.filter((item: TrainingLoadItem) => {
-   const dateFiltered = new Date(item.date) >= new Date(Date.now() - parseInt(timeRange) * 24 * 60 * 60 * 1000);
-   return dateFiltered && (selectedAthlete === "all" || (item.athleteId !== undefined && parseInt(selectedAthlete) === item.athleteId));
- }) : [];
+ const filteredTrainingLoad = Array.isArray(trainingLoad)
+   ? trainingLoad.filter((item: TrainingLoadItem) => {
+       // 1. filter by date based on timeRange (in days)
+       const cutoff   = Date.now() - parseInt(timeRange, 10) * 24 * 60 * 60 * 1000;
+       const dateOk   = new Date(item.date).getTime() >= cutoff;
+       // 2. filter by athleteId (use the real state var, not a phantom one)
+       const athleteOk = athleteId === "all"
+         || (item.athleteId !== undefined && athleteId === item.athleteId.toString());
+       return dateOk && athleteOk;
+     })
+   : [];

@@
- const filteredAcwr = Array.isArray(acwrData) ? acwrData.filter((item: AcwrItem) => {
-   const dateFiltered = new Date(item.date) >= new Date(Date.now() - parseInt(timeRange) * 24 * 60 * 60 * 1000);
-   return dateFiltered && (selectedAthlete === "all" || (item.athleteId !== undefined && parseInt(selectedAthlete) === item.athleteId));
- }) : [];
+ const filteredAcwr = Array.isArray(acwrData)
+   ? acwrData.filter((item: AcwrItem) => {
+       const cutoff   = Date.now() - parseInt(timeRange, 10) * 24 * 60 * 60 * 1000;
+       const dateOk   = new Date(item.date).getTime() >= cutoff;
+       const athleteOk = athleteId === "all"
+         || (item.athleteId !== undefined && athleteId === item.athleteId.toString());
+       return dateOk && athleteOk;
+     })
+   : [];
```

**After this change**:

* `timeRange` defaults to `"7"` (last week) and can be updated via your Time Period select.
* Filters now correctly use `athleteId` (not the nonexistent `selectedAthlete`).

Once applied, your `columnData` (and thus the Weekly Training Load chart) will repopulate with today’s sessions again.
