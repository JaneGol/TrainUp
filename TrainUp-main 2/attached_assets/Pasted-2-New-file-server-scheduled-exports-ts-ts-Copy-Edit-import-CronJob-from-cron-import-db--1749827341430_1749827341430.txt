2 New file → server/scheduled-exports.ts
ts
Copy
Edit
import { CronJob } from "cron";
import { db } from "./db";                         // Drizzle instance
import {
  diaries,
  rpeEntries,
  dashboards,
} from "./db/schema";                              // your table models
import { googleSheetsService } from "./google-sheets"; // existing helper

// ──────────────────────────────────────────────────────────────────────────
// One function that grabs fresh rows and writes them to three sheet tabs
// ──────────────────────────────────────────────────────────────────────────
export async function runDailySheetExport() {
  // ❶ Fetch data created since the previous midnight UTC …
  const since = new Date();
  since.setUTCHours(0, 0, 0, 0);

  const [diaryRows, rpeRows, dashRows] = await Promise.all([
    db.select().from(diaries).where(diaries.createdAt.gte(since)),
    db.select().from(rpeEntries).where(rpeEntries.loggedAt.gte(since)),
    db.select().from(dashboards).where(dashboards.snapshotAt.gte(since)),
  ]);

  // ❷ Append to Google Sheets, creating the tab if it doesn't exist
  const gs = await googleSheetsService(); // returns an authenticated client

  await Promise.all([
    gs.appendTabRows("Self-Control Diaries", diaryRows),
    gs.appendTabRows("RPE", rpeRows),
    gs.appendTabRows("Dashboards", dashRows),
  ]);

  console.info(
    `[export] ${new Date().toISOString()} → ` +
      `${diaryRows.length}/${rpeRows.length}/${dashRows.length} rows sent`,
  );
}

/**
 * Starts a CronJob that runs once per day at 00:00 UTC.
 * In dev we default to no-op unless the env var FORCE_EXPORT_SCHEDULER is set.
 */
export function startScheduledExports() {
  const isProd = process.env.NODE_ENV === "production";
  if (!isProd && !process.env.FORCE_EXPORT_SCHEDULER) return;

  // “0 0 * * *”  → at minute 0, hour 0 every day (UTC)
  const job = new CronJob("0 0 * * *", runDailySheetExport, null, true, "UTC");
  console.info("[export] Daily Google-Sheets export scheduler initialised");
  job.start();
}
3 Patch server/google-sheets.ts
Add one helper that makes adding rows trivial and silently creates the tab if it’s missing.

ts
Copy
Edit
// … existing imports
import { google } from "googleapis";

// ↓  PLACE THIS *below* your current GoogleSheetsService class / helpers
export async function googleSheetsService() {
  // reuse the client you already build in this file,
  // or factor the class into a singleton – whichever you prefer
  const auth = /* ...load service-account credentials from env... */;
  const sheets = google.sheets({ version: "v4", auth });
  const sheetId = process.env.GOOGLE_SHEETS_ID!;

  return {
    async appendTabRows<T extends Record<string, unknown>>(
      tabName: string,
      rows: T[],
    ) {
      if (!rows.length) return;

      // ensure the worksheet exists
      try {
        await sheets.spreadsheets.get({
          spreadsheetId: sheetId,
          ranges: [`'${tabName}'!A1`],
          includeGridData: false,
        });
      } catch {
        await sheets.spreadsheets.batchUpdate({
          spreadsheetId: sheetId,
          requestBody: {
            requests: [{ addSheet: { properties: { title: tabName } } }],
          },
        });
      }

      // convert objects → arrays (preserve column order on first insert)
      const values = rows.map((r) => Object.values(r));
      await sheets.spreadsheets.values.append({
        spreadsheetId: sheetId,
        range: `'${tabName}'!A1`,
        valueInputOption: "RAW",
        requestBody: { values },
      });
    },
  };
}
(If you already expose a class or singleton for Sheets, just graft the appendTabRows method onto it.)

4 Wire-up in server/index.ts
ts
Copy
Edit
import { startScheduledExports } from "./scheduled-exports";

// …after your app/DB have initialised:
startScheduledExports();
5 Expose a manual trigger in server/routes.ts
ts
Copy
Edit
import { runDailySheetExport } from "./scheduled-exports";

router.post("/api/export/google-sheets", async (_req, res) => {
  try {
    await runDailySheetExport();
    res.status(200).json({ ok: true });
  } catch (err) {
    console.error("[export] manual trigger failed:", err);
    res.status(500).json({ error: "export_failed" });
  }
});
6 Environment / Secrets
Key	What it is
GOOGLE_SERVICE_ACCOUNT_KEY	Full JSON from your Google Cloud service-account credentials
GOOGLE_SHEETS_ID	Spreadsheet ID (the long string between /d/ and /edit in the URL)
FORCE_EXPORT_SCHEDULER	(optional, dev) Set to 1 to run the cron locally

Keep those in Replit → Secrets so they never hit version control.

How it works
Feature	Details
Daily export	cron fires at 00:00 UTC → we query today’s rows via Drizzle, batch-append them to Sheets.
Manual trigger	POST /api/export/google-sheets calls the same code path – handy for testing or ad-hoc exports.
Separate tabs	Self-Control Diaries, RPE, and Dashboards (auto-created if absent).
Safety in dev	Scheduler only runs in production unless you set FORCE_EXPORT_SCHEDULER=1.
Zero impact on core app	All new code is additive; no existing logic is modified.

Deploy, set secrets, hit the manual endpoint once to verify the first rows arrive, and you’re done. If you later decide you prefer near–real-time sync, you can simply import and call appendTabRows inside your existing create-/update-controllers instead of (or as well as) the daily cron.