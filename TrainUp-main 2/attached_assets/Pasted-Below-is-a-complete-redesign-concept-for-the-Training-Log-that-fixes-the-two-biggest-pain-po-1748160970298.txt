Below is a **complete redesign concept** for the **Training Log** that fixes the two biggest pain-points you mentioned:

1. **Mobile editing friction** – tapping a tiny underlined “60 min” is hard.
2. **Data consistency** – duration edits must immediately cascade to every chart, ACWR, and team metric.

I’ve split the answer into two parts:

* **A. UX/UI blueprint** – what the new screen looks and feels like.
* **B. Ready-to-run “Replit Agent Task List”** – paste it into **Ask AI** and the agent will build it (React, Tailwind, TanStack Query).

---

## A. Mobile-first UX / UI blueprint

| Element                        | New treatment                                                                                                                    | Why it’s better                                                 |
| ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------- |
| **Session card → Compact row** | One-line summary row with an “edit” chevron ▸                                                                                    | Fits 6-7 sessions on a phone screen; less scrolling.            |
| **Details drawer**             | Tapping the row **slides up a bottom-sheet** (modal) that shows full details & edit controls                                     | Bottom-sheet is the most thumb-friendly pattern on iOS/Android. |
| **Duration editor**            | Inside the sheet: **stepper buttons ±** and a numeric field (⌨️ brings up number pad). Quick presets chips: “45”, “60”, “90” min | Big 40 px buttons hit target; presets save typing.              |
| **Participants**               | Row shows `👥 5 / 8`; tap reveals list inside the sheet                                                                          | Still visible at a glance; details on demand.                   |
| **Session Load**               | Re-calculated live inside the sheet as the coach taps ±                                                                          | Instant feedback; no surprises.                                 |
| **Save button**                | Primary button in sheet footer; disabled if no change                                                                            | Common mobile pattern; prevents accidental submits.             |
| **Swipe-to-close gesture**     | Drag sheet down or tap ✕                                                                                                         | Natural dismissal gesture.                                      |

### Visual sketch (mobile)

```
┌─────────────────────────────────────────────┐
│ 17 │ 25 May — Gym               ▸           │   <-- tap target row
├────┴────────────────────────────────────────┤
│ 👥 5/8  RPE 6.6  Load 446 AU                │   <-- still visible in list
└─────────────────────────────────────────────┘

┈  tap  ┈  bottom sheet slides up  ┈

╭─▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁╮
│ 25 May — Gym                          ✕ │
│ RPE          6.6                         │
│ Participants 5 / 8 (tap to expand)       │
│ Duration                                 │
│  ┌─ – ─┐  60  min  ┌─ + ─┐   presets     │
│                     45   60   90         │
│ Session Load   446 AU                    │
│                                           │
│                [   Save   ]               │
╰───────────────────────────────────────────╯
```

---

### Data-flow for **bullet-proof consistency**

1. **Single source of truth** – `duration_minutes` lives only in `training_sessions`.
2. **Edge Function / API** `PATCH /training/:id`

   * Accepts `{ duration_minutes }`.
   * Returns the updated row **plus a fresh `session_load`** (`rpe * emo_load * duration`).
   * Emits a *database trigger* (or Supabase → realtime channel) so ACWR cron job and any cached aggregates recalc.
3. **Front-end mutation** with TanStack Query

   ```tsx
   const qc = useQueryClient();
   const mutateDuration = useMutation(patchDuration, {
     onSuccess: () => {
       qc.invalidateQueries(['trainingSessions', weekId]);
       qc.invalidateQueries(['loadInsights', teamId]);
       qc.invalidateQueries(['keyMetrics', teamId]);
     }
   });
   ```
4. **Derived metrics** (weekly load, ACWR, Key Metrics) are **never persisted** – they are computed in SQL views or Materialized-View cron tasks so they refresh automatically after invalidation.

---

## B.  “Replit Agent Task List”  – copy, paste, send 🚀

````txt
# 🚀  Replit Agent Task – Mobile-friendly Training Log with bottom-sheet editor
# Repo: https://replit.com/@e89030922661/SportsMindTracker

## 0. Dependencies
npm i @headlessui/react @tanstack/react-table @faker-js/faker
# headlessui Dialog = bottom-sheet; react-table for desktop grid.

## 1. Compact row list
### 1.1 New component
- **File:** src/components/TrainingRow.tsx
  (renders one-line summary; props {session, onOpen})

### 1.2 Replace TrainingLog page
- **File:** src/pages/coach/TrainingLog.tsx
  - Fetch weekSessions with existing hook.
  - Map to `<TrainingRow ... />`.
  - On small screens (`md:hidden`) use the row list.
  - On desktop (`hidden md:block`) keep existing table / cards.

## 2. Bottom-sheet editor
- **File:** src/components/SessionSheet.tsx
  - HeadlessUI `<Dialog>` positioned at bottom (class `fixed inset-x-0 bottom-0`).
  - Props: `{ open, onClose, session }`.
  - Stepper ± buttons:
    ```tsx
    const [duration, setDuration] = useState(session.duration);
    const inc = () => setDuration(d => d+5);
    const dec = () => setDuration(d => Math.max(10, d-5));
    ```
  - Preset Chip component `<Chip onClick={()=>setDuration(45)}>45</Chip>`.
  - Recalculate `sessionLoad` live:  
    `load = (session.rpe * session.emotional_load * duration).toFixed(0)`.

  - **Save** → `mutateDuration({id: session.id, duration})`;
    disable button while loading or unchanged.

## 3. API patch route
- **File:** api/patchDuration.ts
  ```ts
  PATCH /api/training/:id
  body { duration_minutes }
  UPDATE training_sessions SET duration_minutes = $1
  WHERE id = $2
  RETURNING *,
    (rpe * emotional_load * $1)::int AS session_load;
````

(Add RLS policy if on Supabase.)

## 4. Mutation + cache invalidation

* **File:** src/hooks/useUpdateDuration.ts
  (wraps useMutation; invalidates \['trainingSessions', weekId] and \['loadInsights', teamId] & \['keyMetrics', teamId])

## 5. Styling

* TrainingRow:

  ```tsx
  <div
    className="flex justify-between items-center px-4 py-3 bg-zinc-800 rounded-lg mb-2"
    onClick={()=>onOpen(session)}
  >
    <span className="text-sm font-medium">{formatDate(session.date)} — {session.name}</span>
    <ChevronRight className="text-zinc-400"/>
  </div>
  ```

* Bottom-sheet width: full; height: auto up to 75 vh; rounded-t-2xl; backdrop: `bg-black/60`.

## 6. QA checklist (agent runs after build)

1. Open Training Log on mobile preview – rows render, 6 visible on 812 px screen.
2. Tap a row – sheet slides up.
3. Tap +5 twice → Session Load label updates live.
4. Save → sheet closes → row shows new duration, chart in Load Insights updates on refresh.
5. Desktop view still shows existing table with inline editable field.

## 7. Commit message

> feat(training-log): mobile row list + bottom-sheet duration editor with live recalc

# End of agent task

```

---

### How to proceed

1. **Copy** the grey block.  
2. **Open** your Replit → “Ask AI” side-panel.  
3. **Paste & Send** – the agent will scaffold the new components, hook up the mutation, and push one tidy commit.  

After it finishes, open the mobile preview ✨ – you’ll be able to change durations with big thumb-sized controls, and every downstream metric will refresh automatically.
```
