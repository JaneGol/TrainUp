Below is a **drop-in “Replit Agent Task List”** that **fixes the logic only**:

* **Recovery / Readiness gauges** will use **today’s diaries** (coach-local date).
* **Alerts** card will query symptoms & injuries from **today’s entries only**.
* Yesterday’s numbers will never “bleed” into the new day, even if just one athlete has filled in their diary this morning.

No layout or styling changes are touched.

---

````txt
# ----------------------------------------------------------------
# Replit-Agent Task – Key-Metrics must use *today’s* diaries
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# ----------------------------------------------------------------

## 0. Assumptions
* Coach dashboard fetches `/coach/{teamId}/metrics?date=yyyy-mm-dd`
* Diaries are stored in `diary_entries` with `date` = UTC date of entry

## 1. Pass coach-local date & TZ on every dashboard request
### 1.1  src/utils/api.ts
```ts
const tz   = Intl.DateTimeFormat().resolvedOptions().timeZone;     // e.g. "Europe/Paris"
const ymd  = new Date().toISOString().slice(0,10);                // YYYY-MM-DD (client local)
axios.defaults.headers.common['X-TZ']   = tz;
axios.defaults.headers.common['X-DATE'] = ymd;
````

### 1.2  src/hooks/useKeyMetrics.ts

```diff
- const today = new Date().toISOString().slice(0,10);
- useQuery(['keyMetrics', teamId, today], () =>
-   api.get(`/coach/${teamId}/metrics?date=${today}`)
+ const date = axios.defaults.headers.common['X-DATE'];
+ useQuery(['keyMetrics', teamId, date], () =>
+   api.get(`/coach/${teamId}/metrics?date=${date}`)
```

## 2. Backend – filter by *local* calendar day

### 2.1  api/coach/metrics route (or Supabase RPC)

```sql
-- :tz comes from X-TZ, :date from X-DATE
SELECT athlete_id,
       sleep_quality, motivation, stress_level, recovery_score
FROM diary_entries
WHERE date_trunc('day', diary_time AT TIME ZONE :tz) = :date::date
  AND team_id = :teamId;
```

*(If you store `date` column already, cast with TZ to compare.)*

### 2.2  Metric aggregation

```ts
const recovAvg = mean(rows.map(r => r.recovery_score));
const readyPct = Math.round(
  100 * mean(rows.map(r => (r.motivation + (5-r.stress_level)) / 10))
);
```

### 2.3  Alerts query

```sql
SELECT *
FROM diary_entries
WHERE date_trunc('day', diary_time AT TIME ZONE :tz) = :date::date
  AND team_id = :teamId
  AND (
        symptoms NOT IN ('None','') OR
        injury_note IS NOT NULL      OR
        pain_intensity > 0
      );
```

## 3. Invalidate cache after a diary is submitted

### 3.1  src/pages/athlete/MorningDiary.tsx

```ts
onSuccess: () => {
  queryClient.invalidateQueries(['keyMetrics']);   // coach dashboard
  // optionally emit realtime channel if using Supabase Realtime
}
```

## 4. Remove “yesterday fallback” in hook

Delete any `.fallbackLastValue` logic; if no one has filled in today, gauges should read `--` or greyed-out.

```tsx
if (!rows.length) return { recovery:null, readiness:null, highRisk:0, sick:0 };
```

## 5. Display of “no data yet” (already dimmed in previous task)

Alerts card & gauges stay dim / placeholder when values are `null`.

## 6. Commit message

> fix(metrics): use coach-local *today* date for Recovery, Readiness & Alerts; invalidate after diary submit

# End of agent task

```

---

### After the agent commits

* At 06:00 a.m. with no diaries, **Recovery / Readiness gauges** will be dim / `--`.  
* The moment the first player submits today’s diary, values update in real-time.  
* The **Alerts** card only shows injuries/symptoms logged **today** – yesterday’s stomach bug disappears automatically at midnight.
```
