Below is a **single “Replit Agent Task List.”**
Pasting it into **Ask AI** will wire the logic exactly as requested:

* **Athlete selector** (`All Athletes` by default) now drives **both** charts.
* **Time-period/Week selector** applies **only** to the “Weekly Training Load” chart.
* ACWR chart always covers the last 30 days, just filtered by the chosen athlete(s).
* API routes accept `ath=all` to aggregate every athlete in the team.

---

````txt
# ------------------------------------------------------------------
# Replit-Agent Task – Sync athlete filter across charts; period only on Weekly Load
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# ------------------------------------------------------------------

## 1 ▸ Unified state in LoadInsights page
### 1.1  File: src/pages/coach/LoadInsights.tsx
```tsx
const [athleteId, setAthleteId] = useState<'all' | string>('all');   // selector
const [weekStart, setWeekStart] = useState(buildWeekOptions()[0].value);
````

## 2 ▸ Hook keys & calls

### 2.1  Weekly Training Load (period-sensitive)

```diff
- const {data: weekLoad=[]} = useWeekLoad(athleteId, weekStart);
+ const {data: weekLoad=[]} = useWeekLoad(athleteId, weekStart);
```

(Already had weekStart param.)

### 2.2  ACWR 30-day chart (athlete only)

```diff
- const {data: acwr=[]} = useAcwr('30d');
+ const {data: acwr=[]} = useAcwr(athleteId);      // always last 30 days
```

### 2.3  Weekly Work-Load (10 weeks) – same athlete filter

```diff
- const {data: weekly=[]} = useTenWeekLoad();
+ const {data: weekly=[]} = useTenWeekLoad(athleteId);
```

#### Hook changes

*src/hooks/useAcwr.ts*

```diff
- return useQuery(['acwr', '30d'], fetchFn)
+ return useQuery(['acwr', athleteId], ()=>fetchAcwr(athleteId))
```

*src/hooks/useTenWeekLoad.ts*

```diff
- useQuery(['tenWeek', teamId], ...
+ useQuery(['tenWeek', teamId, athleteId], ...
```

*(create overload that passes `ath=all` for team, else specific athlete)*

---

## 3 ▸ Backend endpoints

### 3.1  GET `/acwr/last30`

Params: `ath` (`all` or athlete uuid), `tz`.

```sql
WHERE athlete_id = CASE WHEN :ath = 'all' THEN athlete_id ELSE :ath END
```

Aggregate with `GROUP BY date` when `ath='all'`.

### 3.2  GET `/load/week`

Add same `ath` logic:

```sql
AND (:ath='all' OR t.athlete_id=:ath)
```

### 3.3  GET `/load/10weeks`

Same filter.

---

## 4 ▸ Athlete select component emits `'all'`

Ensure the “All Athletes” `<option>` value is exactly `'all'`.

---

## 5 ▸ Period drop-down stays attached only to Weekly Training Load

No change—other hooks ignore `weekStart`.

---

## 6 ▸ Cache invalidation on selector change

Selectors already re-render hooks via query keys (`athleteId` part).

---

## 7 ▸ Commit message

> feat(load-insights): athlete filter drives all charts; time-period affects weekly load only

# End of agent task

```

---
```
