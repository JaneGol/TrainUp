Below is a **ready-to-paste “Replit Agent Task List”** that asks the agent to generate **one seeding script** which back-fills the last calendar month with believable, random Morning-Diary and RPE entries for every athlete in your database.
Copy everything in the grey block into the **Ask AI** side-panel of your *SportsMindTracker* repl and hit **Send**.

---

````txt
# 🚀  Replit Agent Task – Seed demo data for previous month
# Repo: https://replit.com/@e89030922661/SportsMindTracker

## Objective
Populate the database with mock Morning Self-Control Diaries and RPE
sessions covering **every day of the previous calendar month** so all charts
(Recovery, ACWR, Training Log, etc.) have data to display.

## 1. Dependencies
- Add dev dependency **faker** for randomisation:
  ```bash
  npm i -D @faker-js/faker
````

## 2. Create script

* **File:** `scripts/seedDemoData.ts`
* Pseudo-steps:

```ts
import { faker } from '@faker-js/faker';
import db from '../src/utils/db';            // Prisma or Supabase client
import { subMonths, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';

(async () => {
  const athletes = await db.user.findMany({ where: { role: 'athlete' } });

  const lastMonthStart = startOfMonth(subMonths(new Date(), 1));
  const lastMonthEnd   = endOfMonth  (subMonths(new Date(), 1));

  for (const day of eachDayOfInterval({ start: lastMonthStart, end: lastMonthEnd })) {
    for (const ath of athletes) {

      // 80 % chance to fill diary
      if (Math.random() < 0.8) {
        await db.diary_entries.upsert({
          where: { athlete_id_date: { athlete_id: ath.id, date: day } },
          update: {},
          create: {
            athlete_id : ath.id,
            date       : day,
            sleep_quality  : faker.helpers.arrayElement(['Good','Average','Poor']),
            sleep_hours    : faker.number.int({ min: 5, max: 9 }),
            stress_level   : faker.number.int({ min: 0, max: 5 }),
            motivation     : faker.number.int({ min: 0, max: 5 }),
            recovery_score : faker.number.int({ min: 0, max: 5 }),
            symptoms       : faker.helpers.arrayElement(['None','Runny Nose','Sore Throat','Fever','Diarrhoea']),
            injury_note    : faker.datatype.boolean() ? faker.lorem.words(3) : null,
            pain_intensity : faker.number.int({ min: 0, max: 10 }),
            pain_trend     : faker.helpers.arrayElement(['Better','Same','Worse']),
          }
        });
      }

      // 60 % chance to create an RPE session
      if (Math.random() < 0.6) {
        const duration   = faker.number.int({ min: 45, max: 110 });
        const rpe        = faker.number.int({ min: 1, max: 10 });
        const emoLoad    = faker.number.int({ min: 1, max: 5 }) * 0.5 + 0.5; // 1–1.5
        await db.training_sessions.create({
          data: {
            athlete_id    : ath.id,
            session_date  : day,
            training_type : faker.helpers.arrayElement(['Field','Gym','Game']),
            session_no    : faker.helpers.arrayElement([1,2]),
            rpe,
            emotional_load: emoLoad,
            duration_minutes: duration,
            session_load    : rpe * emoLoad * duration
          }
        });
      }
    }
  }

  console.log('✅ Demo data seeded for last month');
  process.exit(0);
})();
```

* **Idempotency:** use `upsert` so running the script twice will **not duplicate** diary entries.

## 3. Add npm script

* **package.json** → scripts:

  ```json
  "seed:demo": "ts-node --transpile-only scripts/seedDemoData.ts"
  ```

## 4. How to run

```bash
npm run seed:demo
```

(or `npx ts-node ...` inside the Replit shell).
Execution time should be < 10 s for ±30 athletes.

## 5. QA checklist (manual)

1. Open Coach › Dashboard → Key-metrics & charts now show historical data.
2. Coach › Training Log → days from last month display with average RPE & load.
3. Athlete › Fitness Progress → load-trend graph is populated.
4. ACWR chart paints the expected risk zones.

## 6. Commit message

> chore(seed): add faker script to back-fill previous month demo data

# End of agent task

```

---

**That’s it.**  
Paste → Send → watch the agent create the script and run it.  
You’ll instantly have a month of realistic data to test every feature.
```
