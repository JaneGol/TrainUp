Below is a **single task list you can paste directly into the “Ask AI” panel inside your *SportsMindTracker* Repl.**
When you hit **Send**, the Replit agent will patch every part of the pipeline so that:

* The **Training-Log list** and the **Training-Load chart** always show the same daily AU totals.
* The **“Sessions” counter** in Load Insights is the real count of sessions (not unique days).
* When you change the **Time-period** drop-down, **both** charts refresh (not just ACWR).

---

````txt
# ---------------------------------------------------------------
# Replit Agent Task – Fix Training-Log / Training-Load mismatch
# Repo: https://replit.com/@e89030922661/SportsMindTracker
# ---------------------------------------------------------------

## SUMMARY
1. Normalise session types so “Field Training (Session 2)” aggregates with “Field”.
2. Group load data by coach-local calendar dates, not UTC.
3. Key TanStack query by (athlete, period) so the chart refetches on period change.
4. Use raw row-count for the “Sessions” header, not unique days.

## 1. Normalise type names
### 1.1  src/utils/normalizeSessionType.ts
```ts
export const normalizeType = (t: string) => {
  if (t.startsWith('Field')) return 'Field';
  if (t.startsWith('Gym'))   return 'Gym';
  return 'Match';
};
````

### 1.2  Apply in load SQL / RPC

Wherever you `SELECT type`, wrap it:

```sql
normalize_type(type) AS type
```

or in JS:

```ts
rows = rows.map(r => ({ ...r, type: normalizeType(r.type) }));
```

## 2. Bucket by local date

### 2.1  Front-end timezone header

**src/utils/api.ts**

```ts
axios.defaults.headers.common['X-TZ'] =
  Intl.DateTimeFormat().resolvedOptions().timeZone;
```

### 2.2  Adjust SQL

```sql
SELECT date_trunc('day', session_date AT TIME ZONE :tz) AS day,
       ...
```

(`:tz` = header `X-TZ`.)

## 3. Period-aware query key

### 3.1  src/hooks/useLoad.ts

```diff
- return useQuery(['load', athlete], () => fetchLoad(athlete, period));
+ return useQuery(['load', athlete, period], () => fetchLoad(athlete, period));
```

## 4. True session counter

### 4.1  src/pages/coach/LoadInsights.tsx

```diff
- const totalSessions = weekLoad.length;    // days count
+ const totalSessions = rawSessions.length; // each DB row
```

(where `rawSessions` is the un-grouped array you get before summing.)

## 5. Training-Load chart selector

### 5.1  src/hooks/useTrainingLoad.ts

Ensure the reducer uses `normalizeType` and groups by **row\.day** (local date):

```ts
const buckets = _.groupBy(rows, r => r.day);
```

## 6. Manual QA (agent will run)

✓ Daily AU totals in list match bar-heights.
✓ Header “Sessions” equals the count of rows in the list.
✓ Changing Time-period drop-down reloads both charts.

## 7. Commit message

> fix(load): sync log & chart via local-date grouping, period-aware keys, right session count

# End of agent task

```

---

### What happens next

* **Paste** the block above → **Send**.  
* The agent edits your API, hooks and counters in one commit.  
* Refresh *Load Insights* – the Training-Load bars, log entries and “Sessions” total will finally be in lock-step for every period you choose.
```
